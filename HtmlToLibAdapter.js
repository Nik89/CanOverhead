function display(t,e){document.getElementById(t).innerHTML=e}function clear(t){display(t,"")}function displayCanIdentifierError(t){display("input_can_identifier_error",t)}function displayCanPayloadError(t){display("input_can_payload_error",t)}function displayUnknownError(t){display("input_unknown_error",t)}function clearErrorsAndOutputs(){clear("input_can_identifier_error"),clear("input_can_payload_error"),clear("input_unknown_error"),clear("output_can_whole_frame"),clear("output_can_whole_frame_stuffed"),clear("output_max_length"),clear("output_can_field01"),clear("output_can_field02"),clear("output_can_field03"),clear("output_can_field04"),clear("output_can_field05"),clear("output_can_field06"),clear("output_can_field07"),clear("output_can_field08"),clear("output_can_field09"),clear("output_can_field10"),clear("output_can_field11"),clear("output_can_field12"),clear("output_can_field13")}function displayCanFrame11BitWholeFrame(t){let e=t.wholeFrame(),i=`[${e.length()} bits]<br/>`+e.toBinStringWithSpacesLeftAlign();display("output_can_whole_frame",i);let n=t.wholeFrameStuffed(),a=n.length()-e.length();display("output_can_whole_frame_stuffed",i=`[${n.length()} bits, `+`of which ${a} stuff bits]<br/>`+n.toBinStringWithSpacesLeftAlign()),display("output_max_length",`${t.maxLengthAfterStuffing()} bits`)}function displayCanFrame11BitFields(t){let e;display("output_can_field01",`[${(e=t.field01_startOfFrame()).length()} bits] ${e.toBinString()}`),display("output_can_field02",`[${(e=t.field02_identifier()).length()} bits] ${e.toBinStringWithSpacesRightAlign()}`),display("output_can_field03",`[${(e=t.field03_remoteTransmissionRequest()).length()} bits] ${e.toBinString()}`),display("output_can_field04",`[${(e=t.field04_identifierExtensionBit()).length()} bits] ${e.toBinString()}`),display("output_can_field05",`[${(e=t.field05_reservedBit()).length()} bits] ${e.toBinString()}`),display("output_can_field06",`[${(e=t.field06_dataLengthCode()).length()} bits] ${e.toBinString()}`),display("output_can_field07",`[${(e=t.field07_dataField()).length()} bits] ${e.toBinStringWithSpacesRightAlign()}`),display("output_can_field08",`[${(e=t.field08_crc()).length()} bits] ${e.toBinStringWithSpacesRightAlign()}`),display("output_can_field09",`[${(e=t.field09_crcDelimiter()).length()} bits] ${e.toBinString()}`),display("output_can_field10",`[${(e=t.field10_ackSlot()).length()} bits] ${e.toBinString()}`),display("output_can_field11",`[${(e=t.field11_ackDelimiter()).length()} bits] ${e.toBinString()}`),display("output_can_field12",`[${(e=t.field12_endOfFrame()).length()} bits] ${e.toBinString()}`),display("output_can_field13",`[${(e=t.field13_pauseAfterFrame()).length()} bits] ${e.toBinString()}`)}function parseCanIdentifierFromInputForm(){const t=document.getElementById("input_can_identifier").value,e=Number(t);return isNaN(e)?null:e}function parseCanPayloadFromInputForm(){let t=document.getElementById("input_can_payload").value;return(t=t.replaceAll(/0[xX]|[^0-9a-fA-F]/g,"")).length%2!=0?null:(t=t.match(/../g),new Uint8Array(t.map(t=>parseInt(t,16))))}function calculate(){clearErrorsAndOutputs();const t=parseCanIdentifierFromInputForm();if(null===t)return void displayCanIdentifierError("Incorrect identifier format. The input is in base 10 by default. For base 16, use the '0x' prefix; for base 2 use the '0b' prefix.");const e=parseCanPayloadFromInputForm();if(null!==e)try{let i=new CanFrame11Bit(t,e);displayCanFrame11BitWholeFrame(i),displayCanFrame11BitFields(i)}catch(t){t instanceof RangeError&&t.message.startsWith("Identifier")?displayCanIdentifierError(t.message):t instanceof RangeError&&t.message.startsWith("Payload")?displayCanPayloadError(t.message):(displayUnknownError('An unexpected error occurred :( Please <a href="https://github.com/Nik89/CanOverhead/issues">report</a> the conditions leading to your bug!'),console.error(t))}else displayCanPayloadError("Payload must have an even amount of hex characters.")}