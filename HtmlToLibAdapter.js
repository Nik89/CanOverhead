let computeV1=()=>{let e=parseInt(document.getElementById("v1-in-payload-length").value);if(isNaN(e)||e<0||e>8)document.getElementById("v1-input-error").innerHTML="The value should be between 0 and 8 bytes",document.getElementById("v1-out-frames-bits-min").innerHTML="",document.getElementById("v1-out-frames-bits-max").innerHTML="";else{document.getElementById("v1-input-error").innerHTML="";let t=8*e,n=BitSequence.maxLengthAfterStuffing(t);document.getElementById("v1-out-frames-bits-min").innerHTML=t,document.getElementById("v1-out-frames-bits-max").innerHTML=n}};document.getElementById("v2-in-payload").value="1111111111000000000011111111110000000000111111111100000000001111";let computeV2=()=>{let e=document.getElementById("v2-in-identified").value,t=parseInt(e,16);document.getElementById("v2-in-payload").value;try{let e=new CanFrame11Bit(t,void 0);document.getElementById("v2-input-id-error").innerHTML="",document.getElementById("v2-input-pl-error").innerHTML="",e.wholeFrame(),e.wholeFrameStuffed(),document.getElementById("v1-out-frames-bits-min").innerHTML="",document.getElementById("v1-out-frames-bits-max").innerHTML=""}catch{document.getElementById("v2-input-id-error").innerHTML="",document.getElementById("v2-input-pl-error").innerHTML=""}};