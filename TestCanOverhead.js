let bits,frame,toComputeCrcOn,expectedWholeFrame,expectedWholeFrameStuffed,crcBits,check=console.assert;function arrayEqual(e,c){let t=Array.isArray(e)&&Array.isArray(c)&&e.length===c.length,n=e instanceof Uint8Array&&c instanceof Uint8Array&&e.length===c.length;if(t||n){for(let t=0;t<e.length;t++)if(e[t]!==c[t])return!1;return!0}return!1}console.log("Starting unit tests."),check(0===BitSequence.maxAmountOfStuffBits(0)),check(0===BitSequence.maxAmountOfStuffBits(1)),check(0===BitSequence.maxAmountOfStuffBits(2)),check(0===BitSequence.maxAmountOfStuffBits(3)),check(0===BitSequence.maxAmountOfStuffBits(4)),check(1===BitSequence.maxAmountOfStuffBits(5)),check(1===BitSequence.maxAmountOfStuffBits(6)),check(1===BitSequence.maxAmountOfStuffBits(7)),check(1===BitSequence.maxAmountOfStuffBits(8)),check(2===BitSequence.maxAmountOfStuffBits(9)),check(2===BitSequence.maxAmountOfStuffBits(10)),check(2===BitSequence.maxAmountOfStuffBits(11)),check(2===BitSequence.maxAmountOfStuffBits(12)),check(3===BitSequence.maxAmountOfStuffBits(13)),check(3===BitSequence.maxAmountOfStuffBits(14)),check(3===BitSequence.maxAmountOfStuffBits(15)),check(3===BitSequence.maxAmountOfStuffBits(16)),check(4===BitSequence.maxAmountOfStuffBits(17)),check(4===BitSequence.maxAmountOfStuffBits(18)),check(4===BitSequence.maxAmountOfStuffBits(19)),check(4===BitSequence.maxAmountOfStuffBits(20)),check(5===BitSequence.maxAmountOfStuffBits(21)),check(0===BitSequence.maxLengthAfterStuffing(0)),check(1===BitSequence.maxLengthAfterStuffing(1)),check(2===BitSequence.maxLengthAfterStuffing(2)),check(3===BitSequence.maxLengthAfterStuffing(3)),check(4===BitSequence.maxLengthAfterStuffing(4)),check(6===BitSequence.maxLengthAfterStuffing(5)),check(7===BitSequence.maxLengthAfterStuffing(6)),check(8===BitSequence.maxLengthAfterStuffing(7)),check(9===BitSequence.maxLengthAfterStuffing(8)),check(11===BitSequence.maxLengthAfterStuffing(9)),check(12===BitSequence.maxLengthAfterStuffing(10)),check(13===BitSequence.maxLengthAfterStuffing(11)),check(14===BitSequence.maxLengthAfterStuffing(12)),check(16===BitSequence.maxLengthAfterStuffing(13)),check(17===BitSequence.maxLengthAfterStuffing(14)),check(18===BitSequence.maxLengthAfterStuffing(15)),check(19===BitSequence.maxLengthAfterStuffing(16)),check(21===BitSequence.maxLengthAfterStuffing(17)),check(22===BitSequence.maxLengthAfterStuffing(18)),check(23===BitSequence.maxLengthAfterStuffing(19)),check(24===BitSequence.maxLengthAfterStuffing(20)),check(26===BitSequence.maxLengthAfterStuffing(21)),check(arrayEqual((bits=new BitSequence)._sequence,[]),bits._sequence),check(!1===bits._isStuffed),check(arrayEqual((bits=new BitSequence("    1 "))._sequence,[!0])),check(!1===bits._isStuffed),check(arrayEqual((bits=new BitSequence("      0  1    "))._sequence,[!1,!0])),check(!1===bits._isStuffed),check(arrayEqual((bits=new BitSequence("      0  1  101    "))._sequence,[!1,!0,!0,!1,!0])),check(!1===bits._isStuffed),check(arrayEqual((bits=new BitSequence("      0  1  101    ",!0))._sequence,[!1,!0,!0,!1,!0])),check(!0===bits._isStuffed),check(arrayEqual((bits=new BitSequence([0,1,0]))._sequence,[!1,!0,!1])),check(!1===bits._isStuffed),check(arrayEqual((bits=new BitSequence([!1,!0,!1]))._sequence,[!1,!0,!1])),check(!1===bits._isStuffed),check(arrayEqual((bits=new BitSequence([1,!1,"0"]))._sequence,[!0,!1,!1])),check(!1===bits._isStuffed),check(arrayEqual((bits=new BitSequence(0))._sequence,[!1])),check(!1===bits._isStuffed),check(arrayEqual((bits=new BitSequence(1))._sequence,[!0])),check(!1===bits._isStuffed),check(arrayEqual((bits=new BitSequence(!1))._sequence,[!1])),check(!1===bits._isStuffed),check(arrayEqual((bits=new BitSequence(!0))._sequence,[!0])),check(!1===bits._isStuffed),check(0===(new BitSequence).exactAmountOfStuffBits()),check(0===new BitSequence("1").exactAmountOfStuffBits()),check(0===new BitSequence("1110101010").exactAmountOfStuffBits()),check(1===new BitSequence("11111").exactAmountOfStuffBits()),check(2===new BitSequence("111110000").exactAmountOfStuffBits()),check((new BitSequence).applyBitStuffing().equal(new BitSequence("",!0))),check(new BitSequence("1").applyBitStuffing().equal(new BitSequence("1",!0))),check(new BitSequence("1110101010").applyBitStuffing().equal(new BitSequence("1110101010",!0))),check(new BitSequence("11111").applyBitStuffing().equal(new BitSequence("111110",!0))),check(new BitSequence("111110000").applyBitStuffing().equal(new BitSequence("11111000001",!0)));try{new BitSequence("111110",!0).applyBitStuffing(),check(!1,"Error nor raised")}catch(e){}check(0===(new BitSequence).length()),check(1===new BitSequence("1").length()),check(10===new BitSequence("1110101010").length()),check(5===new BitSequence("11111").length()),check(11===new BitSequence("11111000001",!0).length()),check(0===(new BitSequence).exactLengthAfterStuffing()),check(1===new BitSequence("1").exactLengthAfterStuffing()),check(10===new BitSequence("1110101010").exactLengthAfterStuffing()),check(6===new BitSequence("11111").exactLengthAfterStuffing()),check(11===new BitSequence("111110000").exactLengthAfterStuffing()),check(""===new BitSequence("").toBinString()),check("0"===new BitSequence("0").toBinString()),check("10"===new BitSequence("10").toBinString()),check("0010"===new BitSequence("0010").toBinString()),check("0110101"===new BitSequence("0110101").toBinString()),check(""===new BitSequence("").toBinStringWithSpaces()),check("0"===new BitSequence("0").toBinStringWithSpaces()),check("10"===new BitSequence("10").toBinStringWithSpaces()),check("0010"===new BitSequence("0010").toBinStringWithSpaces()),check("011 0101"===new BitSequence("0110101").toBinStringWithSpaces()),check("0 1011 0101"===new BitSequence("010110101").toBinStringWithSpaces()),check(""===new BitSequence("").toHexString()),check("0"===new BitSequence("0").toHexString()),check("000"===new BitSequence("00 0000 0000").toHexString()),check("2"===new BitSequence("10").toHexString()),check("2"===new BitSequence("0010").toHexString()),check("35"===new BitSequence("0110101").toHexString()),check("01F"===new BitSequence("0 0001 1111").toHexString()),check("11F"===new BitSequence("1 0001 1111").toHexString()),check("2FF"===new BitSequence("10 1111 1111").toHexString()),check(""===new BitSequence("").extend("").toBinString()),check("0"===new BitSequence("").extend("0").toBinString()),check("1"===new BitSequence("").extend("1").toBinString()),check("01"===new BitSequence("").extend("01").toBinString()),check("100"===new BitSequence("1").extend("00").toBinString()),check("011"===new BitSequence("0").extend("11").toBinString()),check("0100"===new BitSequence("01").extend("00").toBinString()),check("010"===new BitSequence("01").extend(0).toBinString()),check("011"===new BitSequence("01").extend(1).toBinString()),check("010"===new BitSequence("01").extend(!1).toBinString()),check("011"===new BitSequence("01").extend(!0).toBinString()),bits=new BitSequence("");for(let e of bits)check(!1,"This should not be executed.");bits=new BitSequence("1");for(let e of bits)check(!0===e);bits=new BitSequence("101");for(let e of bits)check(!0===e||!1===e);check(0===CanFrame11Bit.crc15([0])),check(25334===CanFrame11Bit.crc15([1,1,1,1,0,0,0,1])),check(25334===CanFrame11Bit.crc15([!0,!0,!0,!0,0,0,!1,1])),check(1140===CanFrame11Bit.crc15([1,0,0,0,0,0,1,1,0,0,1,1])),check(8874===CanFrame11Bit.crc15([1,1,0,1,0,0,1,1,1,0,1,1,0,0])),check(0===crc17([0])),check(572===crc17([1,1,1,1,0,0,0,1])),check(17895===crc17([1,0,0,0,0,0,1,1,0,0,1,1])),check(3757===crc17([1,1,0,1,0,0,1,1,1,0,1,1,0,0])),check(0===crc21([0])),check(96057===crc21([1,1,1,1,0,0,0,1])),check(1273517===crc21([1,0,0,0,0,0,1,1,0,0,1,1])),check(308572===crc21([1,1,0,1,0,0,1,1,1,0,1,1,0,0])),check(0===(frame=new CanFrame11Bit(0,new Uint8Array(0))).id),check(arrayEqual(frame.payload,new Uint8Array(0))),check(frame.field01_startOfFrame().equal(new BitSequence(0))),check(frame.field02_identifier().equal(new BitSequence("000 0000 0000"))),check(frame.field03_remoteTransmissionRequest().equal(new BitSequence(0))),check(frame.field04_identifierExtensionBit().equal(new BitSequence(0))),check(frame.field05_reservedBit().equal(new BitSequence(0))),check(frame.field06_dataLengthCode().equal(new BitSequence("0000"))),check(frame.field07_dataField().equal(new BitSequence)),toComputeCrcOn=new BitSequence("0  000 0000 0000  0  0  0000"),check(frame.field08_crc().equal(new BitSequence("000 0000 0000 0000"))),check(frame.field09_crcDelimiter().equal(new BitSequence(1))),check(frame.field10_ackSlot().equal(new BitSequence(1))),check(frame.field11_ackDelimiter().equal(new BitSequence(1))),check(frame.field12_endOfFrame().equal(new BitSequence("111 1111"))),check(frame.field13_pauseAfterFrame().equal(new BitSequence("111"))),expectedWholeFrame=new BitSequence("0  000 0000 0000  0  0  0  0000  000 0000 0000 0000  1  1  1  111 1111  111"),check(frame.wholeFrame().equal(expectedWholeFrame)),expectedWholeFrameStuffed=new BitSequence("0  000 01000 00100  0  0  01  0000  0100 00010 0000 10000  1  1  1  111 1111  111",!0),check(frame.wholeFrameStuffed().equal(expectedWholeFrameStuffed)),check(0===(frame=new CanFrame11Bit(0,new Uint8Array(1))).id),check(arrayEqual(frame.payload,new Uint8Array(1))),check(frame.field01_startOfFrame().equal(new BitSequence(0))),check(frame.field02_identifier().equal(new BitSequence("000 0000 0000"))),check(frame.field03_remoteTransmissionRequest().equal(new BitSequence(0))),check(frame.field04_identifierExtensionBit().equal(new BitSequence(0))),check(frame.field05_reservedBit().equal(new BitSequence(0))),check(frame.field06_dataLengthCode().equal(new BitSequence("0001"))),check(frame.field07_dataField().equal(new BitSequence("0000 0000"))),toComputeCrcOn=new BitSequence("0  000 0000 0000  0  0  0001  0000 0000"),crcBits=new BitSequence(CanFrame11Bit.crc15(toComputeCrcOn).toString(2).padStart(15,"0")),check(frame.field08_crc().equal(crcBits)),check(frame.field09_crcDelimiter().equal(new BitSequence(1))),check(frame.field10_ackSlot().equal(new BitSequence(1))),check(frame.field11_ackDelimiter().equal(new BitSequence(1))),check(frame.field12_endOfFrame().equal(new BitSequence("111 1111"))),check(frame.field13_pauseAfterFrame().equal(new BitSequence("111"))),expectedWholeFrame=new BitSequence("0  000 0000 0000  0  0  0  0001  0000 0000100 0100 0010 01101  1  1  111 1111  111"),check(frame.wholeFrame().equal(expectedWholeFrame)),expectedWholeFrameStuffed=new BitSequence("0  000 01000 00100  0  0  01  0001  0000 01000100 0100 0010 01101  1  1  111 1111  111",!0),check(frame.wholeFrameStuffed().equal(expectedWholeFrameStuffed)),(frame=new CanFrame11Bit(307,new Uint8Array(8))).payload[0]=255,frame.payload[7]=255,check(307===frame.id),check(255===frame.payload[0]),check(0===frame.payload[1]),check(0===frame.payload[6]),check(255===frame.payload[7]),check(frame.field01_startOfFrame().equal(new BitSequence(0))),check(frame.field02_identifier().equal(new BitSequence("001 0011 0011"))),check(frame.field03_remoteTransmissionRequest().equal(new BitSequence(0))),check(frame.field04_identifierExtensionBit().equal(new BitSequence(0))),check(frame.field05_reservedBit().equal(new BitSequence(0))),check(frame.field06_dataLengthCode().equal(new BitSequence("1000"))),check(frame.field07_dataField().equal(new BitSequence("1111 1111  0000 0000  0000 0000  0000 00000000 0000  0000 0000  0000 0000  1111 1111"))),toComputeCrcOn=new BitSequence("0  001 0011 0011  0  0  0  1000  1111 1111  0000 0000  0000 0000  0000 00000000 0000  0000 0000  0000 0000  1111 1111"),crcBits=new BitSequence(CanFrame11Bit.crc15(toComputeCrcOn).toString(2).padStart(15,"0")),check(frame.field08_crc().equal(crcBits)),check(frame.field09_crcDelimiter().equal(new BitSequence(1))),check(frame.field10_ackSlot().equal(new BitSequence(1))),check(frame.field11_ackDelimiter().equal(new BitSequence(1))),check(frame.field12_endOfFrame().equal(new BitSequence("111 1111"))),check(frame.field13_pauseAfterFrame().equal(new BitSequence("111"))),expectedWholeFrame=new BitSequence("0  001 0011 0011  0  0  0  1000  1111 1111  0000 0000  0000 0000  0000 00000000 0000  0000 0000  0000 0000  1111 1111001 1000 0101 11111  1  1  111 1111  111"),check(frame.wholeFrame().equal(expectedWholeFrame)),expectedWholeFrameStuffed=new BitSequence("0  001 0011 0011  0  0  0  1000  1111 10111  0000 01000  00100 00010  00001 000001000 00100  00010 00001  0000 01000  1111 10111001 1000 0101 111101  1  1  111 1111  111",!0),check(frame.wholeFrameStuffed().equal(expectedWholeFrameStuffed));const headerLength=19,crcLength=15,postCrcLength=13;for(let e=0;e<=8;e++){let c=new Uint8Array(e);frame=new CanFrame11Bit(0,c);let t=BitSequence.maxLengthAfterStuffing(19+8*c.length+15)+13;check(frame.maxLengthAfterStuffing()===t,c)}